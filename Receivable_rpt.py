import streamlit as st
import pandas as pd
import altair as alt
from st_aggrid import AgGrid, GridOptionsBuilder, JsCode
from st_aggrid.shared import GridUpdateMode
from datetime import datetime
# import numpy as np

# --- C·∫•u h√¨nh trang ---
st.set_page_config(
    page_title="Dashboard Qu·∫£n L√Ω C√¥ng N·ª£ ETC",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- H√†m h·ªó tr·ª£ ---
def calculate_age_category_detailed(days_overdue):
    """Ph√¢n lo·∫°i tu·ªïi n·ª£ chi ti·∫øt"""
    if days_overdue <= 0:
        return 'Trong h·∫°n'
    elif 1 <= days_overdue <= 30:
        return '1-30'
    elif 31 <= days_overdue <= 60:
        return '31-60'
    elif 61 <= days_overdue <= 90:
        return '61-90'
    else: # days_overdue > 90
        return 'Tr√™n 90'

def format_vnd(amount):
    """ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn sang ki·ªÉu VND"""
    if pd.isna(amount) or amount == 0:
        return "0"
    return f"{int(amount):,.0f}" # Kh√¥ng c√≥ ph·∫ßn th·∫≠p ph√¢n

def generate_tooltip_html(service_data_df, amount_col_name='amount'):
    """
    Generates an HTML string for tooltips from service breakdown data.
    service_data_df is expected to have 'service_type' and amount_col_name columns.
    """
    if not isinstance(service_data_df, pd.DataFrame) or service_data_df.empty:
        return None
    lines = []
    for _, row in service_data_df.iterrows():
        service = row['service_type']
        amount = row[amount_col_name]
        if pd.notna(amount) and amount > 0: # Only show services with positive amounts
            lines.append(f"{service}: {format_vnd(amount)}")
    return "\n".join(lines) if lines else None

# --- Sidebar ---
st.sidebar.header("üìÅ T·∫£i L√™n D·ªØ Li·ªáu")
uploaded_file = st.sidebar.file_uploader("Ch·ªçn file Excel (.xls, .xlsx)", type=["xls", "xlsx"])

sheet_name_selected = None
xls = None # Initialize xls
if uploaded_file:
    try:
        xls = pd.ExcelFile(uploaded_file)
        sheet_names = xls.sheet_names
        if not sheet_names:
            st.sidebar.warning("File Excel kh√¥ng c√≥ sheet n√†o.")
            uploaded_file = None
        else:
            sheet_name_selected = st.sidebar.selectbox("Ch·ªçn sheet ch·ª©a d·ªØ li·ªáu c√¥ng n·ª£:", sheet_names)
    except Exception as e:
        st.sidebar.error(f"L·ªói khi ƒë·ªçc file Excel: {e}")
        uploaded_file = None

# --- Ti√™u ƒë·ªÅ ch√≠nh ---
st.title("üìä B·∫¢NG DASHBOARD QU·∫¢N L√ù C√îNG N·ª¢ ETC")
st.markdown("---")

if uploaded_file and sheet_name_selected:
    try:
        df_raw = pd.read_excel(uploaded_file, sheet_name=sheet_name_selected)
        st.sidebar.success(f"ƒê√£ t·∫£i v√† ƒë·ªçc th√†nh c√¥ng sheet: '{sheet_name_selected}'")

        # --- X·ª≠ l√Ω d·ªØ li·ªáu v·ªõi Pandas ---
        required_columns = {
            "customer": "KhachHang",      # T√™n kh√°ch h√†ng
            "due_date": "NgayDaoHan",     # Ng√†y ƒë·∫øn h·∫°n (ph·∫£i l√† ƒë·ªãnh d·∫°ng ng√†y)
            "amount": "SoTienPhaiThu",  # S·ªë ti·ªÅn c√≤n ph·∫£i thu
            "service_type": "LoaiHinhDichVu" # Lo·∫°i h√¨nh d·ªãch v·ª• (R,E,W,P,F)
        }

        missing_cols = []
        actual_columns = {}
        for key, default_name in required_columns.items():
            if default_name in df_raw.columns:
                actual_columns[key] = default_name
            else:
                found_alt = False
                common_alternatives = {
                    "KhachHang": ["khach hang", "ten khach hang", "customer name", "customer","CTY"],
                    "NgayDaoHan": ["ngay dao han", "due date","H·∫†N TT"],
                    "SoTienPhaiThu": ["so tien phai thu", "amount due", "outstanding amount", "balance","D∆Ø N·ª¢"],
                    "LoaiHinhDichVu": ["loai hinh dich vu", "service type", "product type","Lo·∫°i h√¨nh"]
                }
                if default_name in common_alternatives:
                    for alt_name in common_alternatives[default_name]:
                        # Case-insensitive check for alternative column names
                        matching_cols = [col for col in df_raw.columns if col.lower() == alt_name.lower()]
                        if matching_cols:
                            actual_columns[key] = matching_cols[0] # Use the actual casing from file
                            st.sidebar.info(f"S·ª≠ d·ª•ng c·ªôt '{matching_cols[0]}' cho '{default_name}'.")
                            found_alt = True
                            break
                if not found_alt and key in ["customer", "due_date", "amount"]:
                    missing_cols.append(default_name)

        if missing_cols:
            st.error(f"File Excel thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc sau: {', '.join(missing_cols)}. Vui l√≤ng ki·ªÉm tra l·∫°i file.")
            st.stop()
        
        df = df_raw.rename(columns={v: k for k, v in actual_columns.items()})

        if 'due_date' not in df.columns:
            st.error("Kh√¥ng t√¨m th·∫•y c·ªôt ng√†y ƒë√°o h·∫°n ('NgayDaoHan' ho·∫∑c t∆∞∆°ng ƒë∆∞∆°ng).")
            st.stop()
        try:
            df['due_date'] = pd.to_datetime(df['due_date'], errors='coerce')
        except Exception as e:
            st.error(f"L·ªói chuy·ªÉn ƒë·ªïi c·ªôt ng√†y ƒë√°o h·∫°n: {e}. ƒê·∫£m b·∫£o c·ªôt c√≥ ƒë·ªãnh d·∫°ng ng√†y th√°ng h·ª£p l·ªá.")
            st.stop()

        if 'amount' not in df.columns:
            st.error("Kh√¥ng t√¨m th·∫•y c·ªôt s·ªë ti·ªÅn ph·∫£i thu ('SoTienPhaiThu' ho·∫∑c t∆∞∆°ng ƒë∆∞∆°ng).")
            st.stop()
        df['amount'] = pd.to_numeric(df['amount'], errors='coerce').fillna(0)

        if 'service_type' not in df.columns:
            st.warning("Kh√¥ng t√¨m th·∫•y c·ªôt 'LoaiHinhDichVu'. Bi·ªÉu ƒë·ªì stacked chart v√† tooltip chi ti·∫øt s·∫Ω kh√¥ng c√≥ ph√¢n lo·∫°i d·ªãch v·ª•.")
            df['service_type'] = 'Kh√¥ng x√°c ƒë·ªãnh'
        else:
            df['service_type'] = df['service_type'].astype(str).fillna('Kh√¥ng x√°c ƒë·ªãnh')

        df.dropna(subset=['due_date', 'customer'], inplace=True)
        df = df[df['amount'] > 0].copy()

        if df.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu c√¥ng n·ª£ h·ª£p l·ªá sau khi x·ª≠ l√Ω. Vui l√≤ng ki·ªÉm tra n·ªôi dung file.")
            st.stop()

        current_date = pd.to_datetime(datetime.now().date())
        df['days_overdue'] = (current_date - df['due_date']).dt.days
        df['age_category'] = df['days_overdue'].apply(calculate_age_category_detailed)

        # --- C√°c ch·ªâ ti√™u ch√≠nh v·ªÅ c√¥ng n·ª£ (st.metric) ---
        st.subheader("üìà C√ÅC CH·ªà TI√äU CH√çNH V·ªÄ C√îNG N·ª¢")
        total_receivable = df['amount'].sum()
        overdue_df = df[df['days_overdue'] > 0]
        total_overdue_receivable = overdue_df['amount'].sum()
        overdue_30_days_plus_df = df[df['days_overdue'] > 30]
        total_overdue_30_days_plus = overdue_30_days_plus_df['amount'].sum()

        col1, col2, col3 = st.columns(3)
        col1.metric(label="T·ªïng S·ªë D∆∞ C√¥ng N·ª£", value=f"{format_vnd(total_receivable)} VNƒê")
        col2.metric(label="S·ªë D∆∞ C√¥ng N·ª£ Qu√° H·∫°n", value=f"{format_vnd(total_overdue_receivable)} VNƒê",
                    delta=f"{format_vnd(total_overdue_receivable - total_receivable)} VNƒê so v·ªõi t·ªïng n·ª£", 
                    delta_color="inverse") 
        col3.metric(label="C√¥ng N·ª£ Qu√° H·∫°n > 30 Ng√†y", value=f"{format_vnd(total_overdue_30_days_plus)} VNƒê")
        st.markdown("---")

        # --- Bi·ªÉu ƒë·ªì (Altair Chart) ---
        layout_cols = st.columns([6, 4]) 

        with layout_cols[0]:
            st.subheader("üìä C√¥ng N·ª£ Theo Kh√°ch H√†ng & Lo·∫°i H√¨nh D·ªãch V·ª•")
            if not df.empty and 'service_type' in df.columns and 'customer' in df.columns:
                chart_stacked_bar = alt.Chart(df).mark_bar().encode(
                    x=alt.X('customer:N', sort='-y', title='Kh√°ch H√†ng'),
                    y=alt.Y('sum(amount):Q', title='T·ªïng D∆∞ N·ª£ (VNƒê)', axis=alt.Axis(format='~s')),
                    color=alt.Color('service_type:N', title='Lo·∫°i H√¨nh D·ªãch V·ª•'),
                    tooltip=[
                        alt.Tooltip('customer:N', title='Kh√°ch H√†ng'),
                        alt.Tooltip('service_type:N', title='Lo·∫°i D·ªãch V·ª•'),
                        alt.Tooltip('sum(amount):Q', title='D∆∞ N·ª£', format=',.0f')
                    ]
                ).properties(
                    height=450,
                    title='T·ªïng c√¥ng n·ª£ c·ªßa t·ª´ng kh√°ch h√†ng theo lo·∫°i h√¨nh d·ªãch v·ª•'
                )
                st.altair_chart(chart_stacked_bar, use_container_width=True)
            else:
                st.info("Thi·∫øu d·ªØ li·ªáu 'customer' ho·∫∑c 'service_type' ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì stacked bar.")

        with layout_cols[1]:
            st.subheader("üç© Top 5 Kh√°ch H√†ng D∆∞ N·ª£ L·ªõn Nh·∫•t")
            if not df.empty and 'customer' in df.columns:
                customer_total_ar = df.groupby('customer')['amount'].sum().reset_index()
                customer_total_ar_sorted = customer_total_ar.sort_values(by='amount', ascending=False)

                top_5_customers = customer_total_ar_sorted.head(5)
                if len(customer_total_ar_sorted) > 5:
                    other_ar_sum = customer_total_ar_sorted.iloc[5:]['amount'].sum()
                    if other_ar_sum > 0:
                        others_df = pd.DataFrame([{'customer': 'Kh√°ch H√†ng Kh√°c', 'amount': other_ar_sum}])
                        pie_data = pd.concat([top_5_customers, others_df], ignore_index=True)
                    else:
                        pie_data = top_5_customers
                else:
                    pie_data = top_5_customers

                chart_pie = alt.Chart(pie_data).mark_arc(innerRadius=60, outerRadius=120).encode(
                    theta=alt.Theta(field="amount", type="quantitative", stack=True),
                    color=alt.Color(field="customer", type="nominal", title="Kh√°ch H√†ng"),
                    tooltip=[
                        alt.Tooltip('customer:N', title='Kh√°ch H√†ng'),
                        alt.Tooltip('amount:Q', title='D∆∞ N·ª£', format=',.0f')
                    ]
                ).properties(
                    height=430,
                    title='T·ª∑ tr·ªçng d∆∞ n·ª£ c·ªßa Top 5 kh√°ch h√†ng'
                )
                st.altair_chart(chart_pie, use_container_width=True)
            else:
                st.info("Thi·∫øu d·ªØ li·ªáu 'customer' ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì tr√≤n.")

        st.markdown("---")
        number_formatter = JsCode("""
            function formatNumberWithPoint(params) {
                if (params.value == null || isNaN(params.value)) { 
                    return ""; 
                }
                return Number(params.value).toLocaleString('vi-VN', {
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                });
            }""")
        aging_report_containter = st.columns([6, 2]) 

        with aging_report_containter[0]:
            st.subheader("üóìÔ∏è B√°o C√°o Chi Ti·∫øt C√¥ng N·ª£ Ph·∫£i Thu Theo Tu·ªïi N·ª£")

            if not df.empty and 'customer' in df.columns:
                # --- Pivot table for aging report ---
                aging_pivot = pd.pivot_table(
                    df,
                    index='customer',
                    columns='age_category',
                    values='amount',
                    aggfunc='sum',
                    fill_value=0
                )

                age_cols_ordered = ['Trong h·∫°n', '1-30', '31-60', '61-90', 'Tr√™n 90']
                for col in age_cols_ordered:
                    if col not in aging_pivot.columns:
                        aging_pivot[col] = 0
                aging_pivot = aging_pivot[age_cols_ordered] 

                aging_pivot['D∆∞ n·ª£'] = aging_pivot.sum(axis=1)
                aging_pivot.reset_index(inplace=True)
                aging_pivot = aging_pivot.rename(columns={'customer': 'Kh√°ch h√†ng'})
                
                final_cols_order = ['Kh√°ch h√†ng'] + age_cols_ordered + ['D∆∞ n·ª£']
                aging_pivot = aging_pivot[final_cols_order]
                
                aging_pivot_sorted = aging_pivot.sort_values(by='D∆∞ n·ª£', ascending=False).copy()

                # --- NEW: Prepare data for tooltips ---
                # These _tooltip columns are added to the DataFrame to be referenced by tooltipField.
                # They will be explicitly hidden from the grid display later.
                if 'service_type' in df.columns: 
                    service_breakdown_by_age = df.groupby(['customer', 'age_category', 'service_type'])['amount'].sum().reset_index()
                    service_breakdown_total = df.groupby(['customer', 'service_type'])['amount'].sum().reset_index()

                    for age_col in age_cols_ordered:
                        aging_pivot_sorted[f'{age_col}_tooltip'] = None 
                        for i, row in aging_pivot_sorted.iterrows():
                            customer_name = row['Kh√°ch h√†ng']
                            tooltip_df_age = service_breakdown_by_age[
                                (service_breakdown_by_age['customer'] == customer_name) &
                                (service_breakdown_by_age['age_category'] == age_col)
                            ]
                            aging_pivot_sorted.loc[i, f'{age_col}_tooltip'] = generate_tooltip_html(tooltip_df_age, 'amount')

                    aging_pivot_sorted['D∆∞ n·ª£_tooltip'] = None
                    for i, row in aging_pivot_sorted.iterrows():
                        customer_name = row['Kh√°ch h√†ng']
                        tooltip_df_total = service_breakdown_total[service_breakdown_total['customer'] == customer_name]
                        aging_pivot_sorted.loc[i, 'D∆∞ n·ª£_tooltip'] = generate_tooltip_html(tooltip_df_total, 'amount')
                # --- END NEW: Prepare data for tooltips ---


                # --- START: MODIFICATION FOR PINNED TOTAL ROW ---
                total_row_data = {'Kh√°ch h√†ng': 'T·ªîNG C·ªòNG'}
                numeric_cols_to_sum = age_cols_ordered + ['D∆∞ n·ª£']
                
                if not aging_pivot_sorted.empty: 
                    total_sum_values = aging_pivot_sorted[numeric_cols_to_sum].sum()
                    for col_name_sum in numeric_cols_to_sum: 
                        total_row_data[col_name_sum] = int(total_sum_values[col_name_sum]) if pd.notna(total_sum_values[col_name_sum]) else 0
                else: 
                    for col_name_sum in numeric_cols_to_sum: 
                        total_row_data[col_name_sum] = 0
                # --- END: MODIFICATION FOR PINNED TOTAL ROW ---

                gb = GridOptionsBuilder.from_dataframe(aging_pivot_sorted) 
                gb.configure_pagination(paginationAutoPageSize=False, paginationPageSize=10)
                gb.configure_default_column(filterable=True, sortable=True, resizable=True, aggFunc='sum')
                
                gb.configure_column("Kh√°ch h√†ng", headerName="Kh√°ch h√†ng", width=250, pinned='left',
                                    cellStyle={'textAlign': 'left'})

                currency_cols = age_cols_ordered + ['D∆∞ n·ª£']
                for col_name in currency_cols: 
                    column_params = {
                        "headerName": col_name.replace("_", " ").title(),
                        "type": ["numericColumn", "numberColumnFilter"],
                        "valueFormatter": number_formatter,
                        "aggFunc": 'sum',
                        "cellStyle": {'textAlign': 'right'}
                    }
                    tooltip_col_name = f'{col_name}_tooltip'
                    if tooltip_col_name in aging_pivot_sorted.columns:
                        column_params["tooltipField"] = tooltip_col_name
                    
                    gb.configure_column(col_name, **column_params)

                # MODIFICATION: Explicitly hide the auxiliary tooltip data columns from display
                # These columns are present in aging_pivot_sorted for tooltipField to access,
                # but they should not be rendered as visible grid columns.
                for col_in_df in aging_pivot_sorted.columns:
                    if col_in_df.endswith('_tooltip'):
                        gb.configure_column(col_in_df, hide=True)


                gridOptions = gb.build()
                
                gridOptions['enableBrowserTooltips'] = True 

                gridOptions['pinnedBottomRowData'] = [total_row_data]
                gridOptions['getRowStyle'] = JsCode("""
                    function(params) {
                        if (params.node.isRowPinned && params.node.rowPinned === 'bottom') {
                            return { 'font-weight': 'bold' };
                        }
                    }
                """)

                AgGrid(
                    aging_pivot_sorted, 
                    gridOptions=gridOptions,
                    height=650,
                    width='100%',
                    fit_columns_on_grid_load=False, 
                    allow_unsafe_jscode=True,
                    enable_enterprise_modules=False, 
                    update_mode=GridUpdateMode.MODEL_CHANGED,
                    key='aging_grid_v_tooltips_hidden' # Changed key
                )
            else:
                st.info("Thi·∫øu d·ªØ li·ªáu 'customer' ƒë·ªÉ t·∫°o b√°o c√°o tu·ªïi n·ª£.")
            with aging_report_containter[1]:
            # --- Bi·ªÉu ƒë·ªì c·ªôt cho t·ªïng h·ª£p tu·ªïi n·ª£ (Altair Chart) ---
                aging_summary_data_for_chart = df.groupby('age_category')['amount'].sum().reset_index()
                aging_summary_data_for_chart = aging_summary_data_for_chart.rename(columns={'age_category': 'Tu·ªïi N·ª£', 'amount': 'T·ªïng S·ªë Ti·ªÅn'})
                
                aging_summary_data_for_chart['Tu·ªïi N·ª£'] = pd.Categorical(aging_summary_data_for_chart['Tu·ªïi N·ª£'], categories=age_cols_ordered, ordered=True)
                aging_summary_data_for_chart = aging_summary_data_for_chart.sort_values('Tu·ªïi N·ª£')


                chart_aging_bar_horizontal = alt.Chart(aging_summary_data_for_chart).mark_bar().encode(
                    y=alt.Y('Tu·ªïi N·ª£:N', sort=None, title='Nh√≥m Tu·ªïi N·ª£'),
                    x=alt.X('T·ªïng S·ªë Ti·ªÅn:Q', title='T·ªïng D∆∞ N·ª£ (VNƒê)', axis=alt.Axis(format='~s')),
                    color=alt.Color('Tu·ªïi N·ª£:N', legend=None, scale=alt.Scale(scheme='tableau10')), 
                    tooltip=[
                        alt.Tooltip('Tu·ªïi N·ª£:N', title='Nh√≥m Tu·ªïi N·ª£'),
                        alt.Tooltip('T·ªïng S·ªë Ti·ªÅn:Q', title='T·ªïng D∆∞ N·ª£', format=',.0f')
                    ]
                ).properties(
                    title='T·ªïng Quan C√¥ng N·ª£ Ph·∫£i Thu Theo Tu·ªïi N·ª£ (Ngang)',
                )
                
                text_horizontal = chart_aging_bar_horizontal.mark_text(
                    align='left',
                    baseline='middle',
                    dx=5 
                ).encode(
                    text=alt.Text('T·ªïng S·ªë Ti·ªÅn:Q', format='~s')
                )
                st.altair_chart(chart_aging_bar_horizontal + text_horizontal, use_container_width=True)



    except FileNotFoundError:
        st.error("L·ªói: Kh√¥ng t√¨m th·∫•y file. Vui l√≤ng ƒë·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n file ch√≠nh x√°c n·∫øu t·∫£i t·ª´ server.")
    except pd.errors.EmptyDataError:
        st.error(f"L·ªói: Sheet '{sheet_name_selected}' tr·ªëng ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu.")
    except KeyError as e:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y c·ªôt c·∫ßn thi·∫øt trong file Excel: {e}. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n c·ªôt trong file c·ªßa b·∫°n so v·ªõi c√°c t√™n c·ªôt m·∫∑c ƒë·ªãnh ƒë∆∞·ª£c mong ƒë·ª£i: {', '.join(required_columns.values())}.")
        if 'df_raw' in locals() and df_raw is not None: 
             st.error(f"C√°c c·ªôt t√¨m th·∫•y trong sheet '{sheet_name_selected}': {', '.join(df_raw.columns)}")
        else:
             st.error(f"Kh√¥ng th·ªÉ ƒë·ªçc c√°c c·ªôt t·ª´ sheet '{sheet_name_selected}'.")
    except ValueError as e:
        st.error(f"L·ªói d·ªØ li·ªáu: {e}. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng d·ªØ li·ªáu trong c√°c c·ªôt, ƒë·∫∑c bi·ªát l√† c·ªôt ng√†y v√† s·ªë ti·ªÅn.")
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi x·ª≠ l√Ω file: {e}")
        st.exception(e) 
        st.error("Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u tr√∫c file Excel, t√™n c√°c c·ªôt v√† ƒë·ªãnh d·∫°ng d·ªØ li·ªáu.")

elif uploaded_file and not sheet_name_selected and xls and xls.sheet_names:
    st.info("Vui l√≤ng ch·ªçn m·ªôt sheet t·ª´ file Excel ƒë√£ t·∫£i l√™n ·ªü thanh b√™n tr√°i.")
else:
    st.info("üëã Ch√†o m·ª´ng! Vui l√≤ng t·∫£i l√™n file Excel b√°o c√°o c√¥ng n·ª£ ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")
    st.markdown("""
        #### H∆∞·ªõng d·∫´n nhanh:
        1.  **Chu·∫©n b·ªã file Excel:**
            * ƒê·∫£m b·∫£o file c√≥ c√°c c·ªôt t·ªëi thi·ªÉu sau (t√™n c√≥ th·ªÉ kh√°c, nh∆∞ng n·ªôi dung t∆∞∆°ng ·ª©ng):
                * `KhachHang`: T√™n kh√°ch h√†ng.
                * `NgayDaoHan`: Ng√†y ƒë·∫øn h·∫°n thanh to√°n (ƒë·ªãnh d·∫°ng dd/mm/yyyy, yyyy-mm-dd, v.v.).
                * `SoTienPhaiThu`: S·ªë ti·ªÅn c√≤n ph·∫£i thu (d·∫°ng s·ªë).
                * `LoaiHinhDichVu` (T√πy ch·ªçn nh∆∞ng c·∫ßn cho tooltip chi ti·∫øt): Lo·∫°i h√¨nh d·ªãch v·ª•.
            * D√≤ng ti√™u ƒë·ªÅ (header) n√™n ·ªü d√≤ng ƒë·∫ßu ti√™n c·ªßa sheet.
        2.  **T·∫£i file l√™n:** S·ª≠ d·ª•ng n√∫t 'Browse files' ·ªü thanh c√¥ng c·ª• b√™n tr√°i (sidebar).
        3.  **Ch·ªçn Sheet:** Sau khi t·∫£i file th√†nh c√¥ng, ch·ªçn sheet ch·ª©a d·ªØ li·ªáu c√¥ng n·ª£ t·ª´ danh s√°ch th·∫£ xu·ªëng ·ªü sidebar.
        4.  Dashboard s·∫Ω t·ª± ƒë·ªông hi·ªÉn th·ªã c√°c ph√¢n t√≠ch. Ch√∫c b·∫°n c√≥ tr·∫£i nghi·ªám t·ªët!
    """)
